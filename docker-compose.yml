# docker-compose.yml
version: '3.8' # Specify compose file version

services:
  # Flask Web Application Service
  web:
    build: . # Build the image from the Dockerfile in the current directory
    container_name: fuzzy_prompts_web
    # command: gunicorn --bind 0.0.0.0:8000 "fuzzy_prompts:create_app()" --workers 1 --threads 4 --timeout 120 --access-logfile - --error-logfile - # Command to run Flask app
    command: ["gunicorn", "--worker-class", "eventlet", "-w", "1", "fuzzy_prompts:app", "--bind", "0.0.0.0:8000", "--log-level", "debug"]
    volumes:
      - .:/app # Mount current directory to /app in container (good for development)
    ports:
      - "8021:8000" # Map host port 8021 to container port 8000
    environment:
      # Keep Flask/DB/Secret variables
      - FLASK_APP=fuzzy_prompts:create_app
      - FLASK_DEBUG=1 # Set appropriately
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}

      # --- MODIFIED Celery Broker URL ---
      # Directly substitute from .env, using 'guest' as default if var is unset in .env
      - CELERY_BROKER_URL=amqp://guest:guest@broker:5672//
      - SOCKETIO_MESSAGE_QUEUE_URL=amqp://guest:guest@broker:5672//

      # Keep DB variables if needed elsewhere (e.g., result backend)
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=db # If your app uses this directly

      # Keep Celery Result Backend if needed
      - CELERY_RESULT_BACKEND=db+postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}

    depends_on:
      - db       # Wait for db service to be healthy (basic check)
      - broker   # Wait for broker service to be healthy (basic check)
    env_file:
      - .env     # Load variables from .env file

  # Celery Worker Service
  worker:
    build: . # Use the same image as the web service
    container_name: fuzzy_prompts_worker
    # Override the default CMD from the Dockerfile
    command: celery -A celery_app.celery worker -P eventlet --loglevel=info
    # command: sleep infinity
    volumes:
      - .:/app # Mount code for development consistency
    environment:
      - PYTHONPATH=/app
      # Pass same environment variables as web service
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - CELERY_BROKER_URL=amqp://guest:guest@broker:5672//
      - SOCKETIO_MESSAGE_QUEUE_URL=amqp://guest:guest@broker:5672//
      - CELERY_RESULT_BACKEND=db+postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      # Add SECRET_KEY if celery tasks indirectly need it
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - broker
    env_file:
      - .env

  # PostgreSQL Database Service
  db:
    image: postgres:15 # Use an official PostgreSQL image (choose version)
    container_name: fuzzy_prompts_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persist data using a named volume
    environment:
      # Set PostgreSQL user, password, db name - MUST MATCH .env values used by Flask/Celery
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432" # Optional: Map host port if you need direct DB access from host
    healthcheck: # Optional: basic healthcheck
        test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
        interval: 5s
        timeout: 5s
        retries: 5

  # RabbitMQ Broker Service
  broker:
    image: rabbitmq:3-management # Use official RabbitMQ image with management UI
    container_name: fuzzy_prompts_broker
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      # Set default user/pass (optional, can use defaults 'guest'/'guest')
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit loopback_users "[]"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Persist RabbitMQ data (optional for dev)

# Define named volumes for persistent data
volumes:
  postgres_data:
  rabbitmq_data: # Optional persistence for RabbitMQ